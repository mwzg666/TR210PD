C251 COMPILER V5.60.0,  EepRom                                                             21/05/24  09:30:57  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE EepRom
OBJECT MODULE PLACED IN .\obj\EepRom.obj
COMPILER INVOKED BY: D:\KeilMDK\C251\BIN\C251.EXE Hardware\Eeprom\EepRom.c XSMALL INTR2 BROWSE INCDIR(.\Hardware\Usart;.
                    -\Hardware\LED;.\Hardware\TIM;.\Hardware\Eeprom;.\ModBus;.\MwPro;.\Hardware\App;.\USER) DEBUG PRINT(.\obj\EepRom.lst) OBJ
                    -ECT(.\obj\EepRom.obj) 

stmt  level    source

    1          #include "main.h"
    2          #include "eeprom.h"
    3          
    4          #define     IAP_STANDBY()   IAP_CMD = 0     //IAP空闲命令（禁止）
    5          #define     IAP_READ()      IAP_CMD = 1     //IAP读出命令
    6          #define     IAP_WRITE()     IAP_CMD = 2     //IAP写入命令
    7          #define     IAP_ERASE()     IAP_CMD = 3     //IAP擦除命令
    8          
    9          #define     IAP_ENABLE()    IAP_CONTR = IAP_EN; IAP_TPS = MAIN_Fosc / 1000000
   10          #define     IAP_DISABLE()   IAP_CONTR = 0; IAP_CMD = 0; IAP_TRIG = 0; IAP_ADDRE = 0xff; IAP_ADDRH = 0xff;
             - IAP_ADDRL = 0xff
   11          
   12          #define IAP_EN          (1<<7)
   13          #define IAP_SWBS        (1<<6)
   14          #define IAP_SWRST       (1<<5)
   15          #define IAP_CMD_FAIL    (1<<4)
   16          
   17          
   18          //========================================================================
   19          // 函数: void DisableEEPROM(void)
   20          // 描述: 禁止EEPROM.
   21          // 参数: none.
   22          // 返回: none.
   23          // 版本: V1.0, 2014-6-30
   24          //========================================================================
   25          void DisableEEPROM(void)        //禁止访问EEPROM
   26          {
   27   1          IAP_CONTR = 0;          //关闭 IAP 功能
   28   1          IAP_CMD = 0;            //清除命令寄存器
   29   1          IAP_TRIG = 0;           //清除触发寄存器
   30   1          IAP_ADDRE = 0xff;       //将地址设置到非 IAP 区域
   31   1          IAP_ADDRH = 0xff;       //将地址设置到非 IAP 区域
   32   1          IAP_ADDRL = 0xff;
   33   1      }
   34          
   35          //========================================================================
   36          // 函数: void EEPROM_Trig(void)
   37          // 描述: 触发EEPROM操作.
   38          // 参数: none.
   39          // 返回: none.
   40          // 版本: V1.0, 2014-6-30
   41          //========================================================================
   42          void EEPROM_Trig(void)
   43          {
   44   1          F0 = EA;    //保存全局中断
   45   1          EA = 0;     //禁止中断, 避免触发命令无效
   46   1          IAP_TRIG = 0x5A;
   47   1          IAP_TRIG = 0xA5;                    //先送5AH，再送A5H到IAP触发寄存器，每次都需要如此
   48   1                                              //送完A5H后，IAP命令立即被触发启动
   49   1                                              //CPU等待IAP完成后，才会继续执行程序。
   50   1          _nop_();   //由于STC32G是多级流水线的指令系统，触发命令后建议加4个NOP，保证IAP_DATA的数据完成准备
   51   1          _nop_();
   52   1          _nop_();
   53   1          _nop_();
   54   1          EA = F0;    //恢复全局中断
   55   1      }
   56          
C251 COMPILER V5.60.0,  EepRom                                                             21/05/24  09:30:57  PAGE 2   

   57          //========================================================================
   58          // 函数: void EEPROM_SectorErase(u32 EE_address)
   59          // 描述: 擦除一个扇区.
   60          // 参数: EE_address:  要擦除的EEPROM的扇区中的一个字节地址.
   61          // 返回: none.
   62          // 版本: V1.0, 2014-6-30
   63          //========================================================================
   64          void EEPROM_SectorErase(u32 EE_address)
   65          {
   66   1          IAP_ENABLE();                       //设置等待时间，允许IAP操作，送一次就够
   67   1          IAP_ERASE();                        //宏调用, 送扇区擦除命令，命令不需改变时，不需重新送命令
   68   1                                              //只有扇区擦除，没有字节擦除，512字节/扇区。
   69   1                                              //扇区中任意一个字节地址都是扇区地址。
   70   1          IAP_ADDRE = (u8)(EE_address >> 16); //送扇区地址高字节（地址需要改变时才需重新送地址）
   71   1          IAP_ADDRH = (u8)(EE_address >> 8);  //送扇区地址中字节（地址需要改变时才需重新送地址）
   72   1          IAP_ADDRL = (u8)EE_address;         //送扇区地址低字节（地址需要改变时才需重新送地址）
   73   1          EEPROM_Trig();                      //触发EEPROM操作
   74   1          DisableEEPROM();                    //禁止EEPROM操作
   75   1          //Delay(10);
   76   1      }
   77          
   78          //========================================================================
   79          // 函数: void EEPROM_read_n(u32 EE_address,u8 *DataAddress,u8 lenth)
   80          // 描述: 读N个字节函数.
   81          // 参数: EE_address:  要读出的EEPROM的首地址.
   82          //       DataAddress: 要读出数据的指针.
   83          //       length:      要读出的长度
   84          // 返回: 0: 写入正确.  1: 写入长度为0错误.  2: 写入数据错误.
   85          // 版本: V1.0, 2014-6-30
   86          //========================================================================
   87          void EEPROM_read(u32 EE_address,u8 *DataAddress,u16 length)
   88          {
   89   1          EA = 0;  
   90   1          IAP_ENABLE();                           //设置等待时间，允许IAP操作，送一次就够
   91   1          IAP_READ();                             //送字节读命令，命令不需改变时，不需重新送命令
   92   1          do
   93   1          {
   94   2              IAP_ADDRE = (u8)(EE_address >> 16); //送地址高字节（地址需要改变时才需重新送地址）
   95   2              IAP_ADDRH = (u8)(EE_address >> 8);  //送地址中字节（地址需要改变时才需重新送地址）
   96   2              IAP_ADDRL = (u8)EE_address;         //送地址低字节（地址需要改变时才需重新送地址）
   97   2              EEPROM_Trig();                      //触发EEPROM操作
   98   2              *DataAddress = IAP_DATA;            //读出的数据送往
   99   2              EE_address++;
  100   2              DataAddress++;
  101   2          }while(--length);
  102   1      
  103   1          DisableEEPROM();
  104   1          EA = 1;  
  105   1      }
  106          
  107          
  108          //========================================================================
  109          // 函数: u8 EEPROM_write_n(u32 EE_address,u8 *DataAddress,u8 length)
  110          // 描述: 写N个字节函数.
  111          // 参数: EE_address:  要写入的EEPROM的首地址.
  112          //       DataAddress: 要写入数据的指针.
  113          //       length:      要写入的长度
  114          // 返回: 0: 写入正确.  1: 写入长度为0错误.  2: 写入数据错误.
  115          // 版本: V1.0, 2014-6-30
  116          //========================================================================
  117          bool EEPROM_write(u32 EE_address,u8 *DataAddress,u16 length)
  118          {
  119   1          bool ret = true;
  120   1          u8  i;
  121   1          u16 j;
  122   1          u8  *p;
C251 COMPILER V5.60.0,  EepRom                                                             21/05/24  09:30:57  PAGE 3   

  123   1          
  124   1          if(length == 0) return 1;   //长度为0错误
  125   1      
  126   1          IAP_ENABLE();                       //设置等待时间，允许IAP操作，送一次就够
  127   1          i = length;
  128   1          j = EE_address;
  129   1          p = DataAddress;
  130   1          IAP_WRITE();                            //宏调用, 送字节写命令
  131   1          do
  132   1          {
  133   2              IAP_ADDRE = (u8)(EE_address >> 16); //送地址高字节（地址需要改变时才需重新送地址）
  134   2              IAP_ADDRH = (u8)(EE_address >> 8);  //送地址中字节（地址需要改变时才需重新送地址）
  135   2              IAP_ADDRL = (u8)EE_address;         //送地址低字节（地址需要改变时才需重新送地址）
  136   2              IAP_DATA  = *DataAddress;           //送数据到IAP_DATA，只有数据改变时才需重新送
  137   2              EEPROM_Trig();                      //触发EEPROM操作
  138   2              EE_address++;                       //下一个地址
  139   2              DataAddress++;                      //下一个数据
  140   2          }while(--length);                       //直到结束
  141   1      
  142   1          EE_address = j;
  143   1          length = i;
  144   1          DataAddress = p;
  145   1          i = 0;
  146   1          IAP_READ();                             //读N个字节并比较
  147   1          do
  148   1          {
  149   2              IAP_ADDRE = (u8)(EE_address >> 16); //送地址高字节（地址需要改变时才需重新送地址）
  150   2              IAP_ADDRH = (u8)(EE_address >> 8);  //送地址中字节（地址需要改变时才需重新送地址）
  151   2              IAP_ADDRL = (u8)EE_address;         //送地址低字节（地址需要改变时才需重新送地址）
  152   2              EEPROM_Trig();                      //触发EEPROM操作
  153   2              if(*DataAddress != IAP_DATA)        //读出的数据与源数据比较
  154   2              {
  155   3                  ret = false;
  156   3                  break;
  157   3              }
  158   2              EE_address++;
  159   2              DataAddress++;
  160   2          }while(--length);
  161   1      
  162   1          DisableEEPROM();
  163   1          return ret;
  164   1      }
  165          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       334     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =    ------         20
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
