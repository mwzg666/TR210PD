C251 COMPILER V5.60.0,  PdFilter                                                           21/05/24  09:30:57  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE PdFilter
OBJECT MODULE PLACED IN .\obj\PdFilter.obj
COMPILER INVOKED BY: D:\KeilMDK\C251\BIN\C251.EXE Hardware\App\PdFilter.c XSMALL INTR2 BROWSE INCDIR(.\Hardware\Usart;.\
                    -Hardware\LED;.\Hardware\TIM;.\Hardware\Eeprom;.\ModBus;.\MwPro;.\Hardware\App;.\USER) DEBUG PRINT(.\obj\PdFilter.lst) OB
                    -JECT(.\obj\PdFilter.obj) 

stmt  level    source

    1          #include "math.h"
    2          #include "main.h"
    3          #include "PdFilter.h"
    4          #include "PDoseRateCalc.h"
    5          
    6          extern float fAverCPS;
    7          
    8          void InitArr(tag_CALC_DOSERATE* me, float cps)
    9          {
   10   1          BYTE i;
   11   1      
   12   1          memset(me->afCPSBuf, 0, FIRST_CPS_MEASURE_TIME * 4);
   13   1          for (i = 0; i < FIRST_CPS_MEASURE_TIME; i++)
   14   1          {
   15   2              me->afCPSBuf[i] = cps;
   16   2          }
   17   1          me->bBufFull = TRUE;
   18   1          me->nCPSBuf = FIRST_CPS_MEASURE_TIME;
   19   1          me->fCpsHis = cps;
   20   1          me->fCpsMax = cps;
   21   1          me->fCpsLast = cps;
   22   1      
   23   1          //me->NoCpsTime = 0;         // 连续无计数时间
   24   1      
   25   1          me->timerCnt = FIRST_CPS_MEASURE_TIME * LOW_DOSE_RATE_MODE_CPS_FITERBUF_SZIE;
   26   1      
   27   1          for (i = 0; i < LOW_DOSE_RATE_MODE_CPS_FITERBUF_SZIE; i++)
   28   1          {
   29   2              me->BdAvCps[i] = cps;
   30   2          }
   31   1      
   32   1          me->Av5sCps = cps;
   33   1          me->Av10sCps = cps;
   34   1          me->Av30sCps = cps;
   35   1          me->Av60sCps = cps;
   36   1          me->Av120sCps = cps;
   37   1          me->Av600sCps = cps;
   38   1      }
   39          
   40          
   41          void FullArr(tag_CALC_DOSERATE* me, float cps)
   42          {
   43   1          #define FULL_CNT  1
   44   1          BYTE i;
   45   1      
   46   1          if (cps < BK_CPS)
   47   1          {
   48   2              cps = BK_CPS;
   49   2          }
   50   1      
   51   1          memset(me->afCPSBuf, 0, FIRST_CPS_MEASURE_TIME * 4);
   52   1          for (i = 0; i < FULL_CNT; i++)
   53   1          {
   54   2              me->afCPSBuf[i] = cps;
   55   2          }
   56   1          me->bBufFull = FALSE;
   57   1          me->nCPSBuf = FULL_CNT;
C251 COMPILER V5.60.0,  PdFilter                                                           21/05/24  09:30:57  PAGE 2   

   58   1          me->fCpsHis = cps;
   59   1          me->fCpsMax = cps;
   60   1          me->fCpsLast = cps;
   61   1      
   62   1      
   63   1          //me->NoCpsTime = 0;         // 连续无计数时间
   64   1      
   65   1          me->timerCnt = FULL_CNT;
   66   1      
   67   1          me->Av5sCps = cps;
   68   1          me->Av10sCps = cps;
   69   1          me->Av30sCps = cps;
   70   1          me->Av60sCps = cps;
   71   1          me->Av120sCps = cps;
   72   1          me->Av600sCps = cps;
   73   1      }
   74          
   75          
   76          void ClearArr(tag_CALC_DOSERATE* me)
   77          {
   78   1          memset(me->afCPSBuf, 0, FIRST_CPS_MEASURE_TIME * 4);
   79   1       
   80   1          me->bBufFull = FALSE;
   81   1          me->nCPSBuf = 0;
   82   1          me->fCpsHis = 0;
   83   1          me->fCpsMax = 0;
   84   1          me->fCpsLast = 0;
   85   1          //me->NoCpsTime = 0;         // 连续无计数时间
   86   1      
   87   1          me->timerCnt = 0;
   88   1      
   89   1          me->Av5sCps = 0;
   90   1          me->Av10sCps = 0;
   91   1          me->Av30sCps = 0;
   92   1          me->Av60sCps = 0;
   93   1          me->Av120sCps = 0;
   94   1          me->Av600sCps = 0;
   95   1      }
   96          
   97          
   98          
   99          float LastTimeAv(tag_CALC_DOSERATE *me, BYTE time)
  100          {
  101   1          float ret = 0.0;
  102   1          BYTE i;
  103   1          
  104   1          for (i=FIRST_CPS_MEASURE_TIME-time;i<FIRST_CPS_MEASURE_TIME;i++)
  105   1          {
  106   2              ret +=  me->afCPSBuf[i];
  107   2          }
  108   1          return (ret/time);
  109   1      }
  110          
  111          // 缓冲区满后：计算最近平均值
  112          void CalcLastAv(tag_CALC_DOSERATE *me)
  113          {
  114   1          me->Av120sCps = LastTimeAv(me, 120);
  115   1          me->Av60sCps  = LastTimeAv(me, 60);
  116   1          me->Av30sCps  = LastTimeAv(me, 30);
  117   1          me->Av10sCps  = LastTimeAv(me, 10);
  118   1          me->Av5sCps   = LastTimeAv(me, 5);
  119   1      }
  120          
  121          float NearTimeAv(tag_CALC_DOSERATE *me, BYTE time)
  122          {
  123   1          float ret = 0.0;
C251 COMPILER V5.60.0,  PdFilter                                                           21/05/24  09:30:57  PAGE 3   

  124   1          BYTE i;
  125   1      
  126   1          if (me->nCPSBuf < time)
  127   1          {
  128   2              // 取所有的数据
  129   2              for (i=0;i<me->nCPSBuf;i++)
  130   2              {
  131   3                  ret +=  me->afCPSBuf[i];
  132   3              }
  133   2      
  134   2              return (ret/me->nCPSBuf);
  135   2          }
  136   1          else
  137   1          {
  138   2              // 取最后的数
  139   2              for (i=me->nCPSBuf-time;i<me->nCPSBuf;i++)
  140   2              {
  141   3                  ret +=  me->afCPSBuf[i];
  142   3              }
  143   2              return (ret/time); 
  144   2          }
  145   1      }
  146          
  147          
  148          // 缓冲区没有满：计算最近平均值
  149          void CalcNearAv(tag_CALC_DOSERATE *me)
  150          {
  151   1          me->Av5sCps  = NearTimeAv(me, 5);
  152   1          me->Av10sCps = NearTimeAv(me, 10);
  153   1          me->Av30sCps = NearTimeAv(me, 30);
  154   1          me->Av60sCps = NearTimeAv(me, 60);
  155   1          me->Av120sCps = NearTimeAv(me, 120);
  156   1      }
  157          
  158          
  159          // 计数平滑 120秒
  160          float CounterPH(tag_CALC_DOSERATE *me)
  161          {    
  162   1          float Val = 0.0;
  163   1          BYTE i;
  164   1          
  165   1          Val = 0.0;
  166   1          if (me->bBufFull)
  167   1          {
  168   2              for (i=0;i<FIRST_CPS_MEASURE_TIME;i++)
  169   2              {
  170   3                  Val += me->afCPSBuf[i];
  171   3              }
  172   2              Val = Val/FIRST_CPS_MEASURE_TIME;
  173   2          }
  174   1          else
  175   1          {
  176   2              if (me->nCPSBuf == 0)
  177   2              {
  178   3                  me->fCpsHis = BK_CPS;
  179   3                  return 0;
  180   3              }
  181   2              else
  182   2              {
  183   3                  for (i=0;i<me->nCPSBuf;i++)
  184   3                  {
  185   4                      Val += me->afCPSBuf[i];
  186   4                  }
  187   3                  Val = Val/me->nCPSBuf;
  188   3              }
  189   2          }
C251 COMPILER V5.60.0,  PdFilter                                                           21/05/24  09:30:57  PAGE 4   

  190   1      
  191   1          if (Val < BK_CPS)
  192   1          {
  193   2              Val = BK_CPS;
  194   2          }
  195   1          
  196   1          me->fCpsHis = Val;
  197   1          return Val;
  198   1      }
  199          
  200          
  201          // 本底平滑
  202          float BdPH(tag_CALC_DOSERATE* me)
  203          {
  204   1          float r = 0.0;
  205   1          BYTE i, c;
  206   1          c = me->timerCnt / FIRST_CPS_MEASURE_TIME;
  207   1          if (c > 0)
  208   1          {
  209   2              for (i = 0; i < c; i++)
  210   2              {
  211   3                  r += me->BdAvCps[i];
  212   3              }
  213   2      
  214   2              // 把最近的值平滑进去，不然2分钟剂量率不动
  215   2              r += CounterPH(me);
  216   2              r = r / (c + 1);
  217   2          }
  218   1          else
  219   1          {
  220   2              r = CounterPH(me);
  221   2          }
  222   1          
  223   1          return r;
  224   1      }
  225          
  226          
  227          void PushCps(tag_CALC_DOSERATE* me, float cps)
  228          {
  229   1          BYTE i, j;
  230   1      
  231   1          if (cps == 0)
  232   1          {
  233   2              me->NoCpsTime ++;
  234   2          }
  235   1          else
  236   1          {
  237   2              me->NoCpsTime = 0;         // 连续无计数时间
  238   2          }
  239   1      
  240   1          if (me->nCPSBuf >= FIRST_CPS_MEASURE_TIME)  // 缓冲区满了
  241   1          {
  242   2              me->bBufFull = TRUE;
  243   2      
  244   2              // 把数据往前移动
  245   2              for (i = 1; i < FIRST_CPS_MEASURE_TIME; i++)
  246   2              {
  247   3                  me->afCPSBuf[i - 1] = me->afCPSBuf[i];
  248   3              }
  249   2              //新数据放在最后
  250   2              me->afCPSBuf[FIRST_CPS_MEASURE_TIME - 1] = cps;
  251   2      
  252   2              CalcLastAv(me);
  253   2          }
  254   1          else
  255   1          {
C251 COMPILER V5.60.0,  PdFilter                                                           21/05/24  09:30:57  PAGE 5   

  256   2              me->afCPSBuf[me->nCPSBuf++] = cps;
  257   2      
  258   2              CalcNearAv(me);
  259   2          }
  260   1      
  261   1          me->timerCnt++;
  262   1          if (me->timerCnt > 0)
  263   1          {
  264   2              j = me->timerCnt / FIRST_CPS_MEASURE_TIME;
  265   2              if ((me->timerCnt % FIRST_CPS_MEASURE_TIME) == 0)
  266   2              {
  267   3                  me->BdAvCps[j - 1] = CounterPH(me);
  268   3              }
  269   2      
  270   2              if (me->timerCnt >= FIRST_CPS_MEASURE_TIME * LOW_DOSE_RATE_MODE_CPS_FITERBUF_SZIE)
  271   2              {
  272   3                  // 最后一个
  273   3                  me->timerCnt -= FIRST_CPS_MEASURE_TIME;
  274   3                  for (i = 1; i < LOW_DOSE_RATE_MODE_CPS_FITERBUF_SZIE; i++)
  275   3                  {
  276   4                      me->BdAvCps[i - 1] = me->BdAvCps[i];
  277   4                  }
  278   3              }
  279   2      
  280   2              me->Av600sCps = BdPH(me);
  281   2          }
  282   1      }
  283          
  284          
  285          float GetLast(tag_CALC_DOSERATE* me)
  286          {
  287   1          if (me->bBufFull)
  288   1          {
  289   2              return me->afCPSBuf[FIRST_CPS_MEASURE_TIME-1];
  290   2          }
  291   1      
  292   1          return me->afCPSBuf[me->nCPSBuf-1];
  293   1      }
  294          
  295          
  296          
  297          // 快速上升
  298          void FastUp(tag_CALC_DOSERATE* me)
  299          {
  300   1          float last;
  301   1          if (me->Av10sCps > (me->fCpsLast + 3*sqrt(me->fCpsLast)) )
  302   1          {
  303   2              last = GetLast(me);
  304   2              ClearArr(me);
  305   2              
  306   2              // 把最后1个计数存入缓存
  307   2              PushCps(me, last);
  308   2              me->fCpsLast = me->fCpsHis;
  309   2          }
  310   1      }
  311          
  312          // 小剂量慢速上升
  313          void LowUp(tag_CALC_DOSERATE* me)
  314          {
  315   1          if (me->Av60sCps > (me->fCpsLast * 3) )
  316   1          {
  317   2              InitArr(me, me->Av30sCps);
  318   2          }
  319   1      }
  320          
  321          
C251 COMPILER V5.60.0,  PdFilter                                                           21/05/24  09:30:57  PAGE 6   

  322          void UpFilter(tag_CALC_DOSERATE* me)
  323          {
  324   1          if (me->Av5sCps >= 3)  // 33uSv/h
  325   1          {
  326   2              FastUp(me);
  327   2              me->fCpsHis = me->Av60sCps;
  328   2          }
  329   1          if (me->Av5sCps >= 1)  // 11uSv/h
  330   1          {
  331   2              FastUp(me);
  332   2              me->fCpsHis = me->Av120sCps;
  333   2          }
  334   1          else
  335   1          {
  336   2              if (me->Av60sCps >= 0.1)  // 1uSv/h
  337   2              {
  338   3                  LowUp(me);
  339   3                  me->fCpsHis = me->Av120sCps;
  340   3              }
  341   2              else
  342   2              {
  343   3                  // 本底用600s平滑
  344   3                  me->fCpsHis =  me->Av600sCps;
  345   3              }
  346   2          }
  347   1      
  348   1          if (me->fCpsHis > me->fCpsMax)
  349   1          {
  350   2              me->fCpsMax = me->fCpsHis;
  351   2          }
  352   1      }
  353          
  354          
  355          void DownFilter(tag_CALC_DOSERATE* me)
  356          {
  357   1          if (me->fCpsMax > 10)
  358   1          {
  359   2              if (me->Av5sCps < me->fCpsMax - 3*sqrt(me->fCpsMax))
  360   2              {
  361   3                  FullArr(me, me->Av5sCps);
  362   3              }
  363   2      
  364   2              if (me->NoCpsTime >= 3)
  365   2              {
  366   3                  InitArr(me, BK_CPS);
  367   3              }
  368   2          }
  369   1          else if (me->fCpsMax >= 2)
  370   1          {
  371   2              //FastDown(me);
  372   2              if (me->NoCpsTime > 5)
  373   2              {
  374   3                  InitArr(me, BK_CPS);
  375   3              }
  376   2          }
  377   1          else if (me->fCpsMax >= 1)
  378   1          {
  379   2              if (me->Av10sCps == 0)
  380   2              {
  381   3                  InitArr(me, BK_CPS);
  382   3              }
  383   2          }
  384   1          else if (me->fCpsMax >= 0.1)
  385   1          {
  386   2              if (me->Av30sCps == 0)
  387   2              {
C251 COMPILER V5.60.0,  PdFilter                                                           21/05/24  09:30:57  PAGE 7   

  388   3                  InitArr(me, BK_CPS);
  389   3              }
  390   2          }
  391   1          else if (me->fCpsMax >= 0.05)
  392   1          {
  393   2              if (me->Av60sCps == 0)
  394   2              {
  395   3                  InitArr(me, BK_CPS);
  396   3              }
  397   2          }
  398   1      }
  399          
  400          
  401          
  402          void CpsFilter(tag_CALC_DOSERATE *me, DWORD Cps)
  403          {
  404   1          PushCps(me,Cps);
  405   1      
  406   1          #if 1
  407   1          UpFilter(me);
  408   1          DownFilter(me);
  409   1          #else
                   // 做温度试验，600秒
                   me->fCpsHis =  me->Av600sCps;
                   #endif
  413   1      }
  414          
  415          
  416          void QEpdDoseRateUpdate(QEpd *pEpd, tag_CALC_DOSERATE *me, 
  417                                                  float fScaleFactor, bool getMaxAndSum)
  418          {
  419   1          me->cpsDoseCount = (uint32_t)SysParam.s_DoseRate.Cps1;
  420   1          CpsFilter(me, me->cpsDoseCount);
  421   1          fAverCPS = me->fCpsHis;
  422   1          
  423   1          me->fDoseRate = QEpdDoseRateCalc();
  424   1          me->fDoseRate *= fScaleFactor;
  425   1          
  426   1          if(getMaxAndSum)
  427   1          {
  428   2              me->fDoseSumx += (me->fDoseRate/3600.0f);
  429   2             
  430   2              //pEpd->EpdPara.statusInfo.yLastDoseSum = me->fDoseSumx;
  431   2              
  432   2              if(me->fDoseRate > pEpd->EpdPara.statusInfo.iMaxDoseRate) 
  433   2              {
  434   3                  pEpd->EpdPara.statusInfo.iMaxDoseRate = me->fDoseRate;
  435   3      
  436   3              }
  437   2          }
  438   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      2265     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =    ------         29
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
C251 COMPILER V5.60.0,  PdFilter                                                           21/05/24  09:30:57  PAGE 8   

  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
