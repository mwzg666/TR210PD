C251 COMPILER V5.60.0,  ModBusDev                                                          21/05/24  09:30:57  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE ModBusDev
OBJECT MODULE PLACED IN .\obj\ModBusDev.obj
COMPILER INVOKED BY: D:\KeilMDK\C251\BIN\C251.EXE ModBus\ModBusDev.c XSMALL INTR2 BROWSE INCDIR(.\Hardware\Usart;.\Hardw
                    -are\LED;.\Hardware\TIM;.\Hardware\Eeprom;.\ModBus;.\MwPro;.\Hardware\App;.\USER) DEBUG PRINT(.\obj\ModBusDev.lst) OBJECT
                    -(.\obj\ModBusDev.obj) 

stmt  level    source

    1          #include "ModBus.h"
    2          #include "ModBusDev.h"
    3          #include "uart.h"
    4          
    5          MODBUS_ADDR xdata ModBusAddr;
    6          MODBUS_DOSERATE xdata ModBusDoserate;
    7          MODBUS_ALARM xdata ModBusAlarm;
    8          MODBUS_THR xdata ModBusThr;
    9          MODBUS_FACTOR xdata ModBusFactor;
   10          
   11          
   12          
   13          /*
   14          ModBus 帧格式
   15          1. 发送帧
   16          地址           命令     寄存器    寄存器数量    数据                                             CRC   
   17          0A(固定值)     Cmd(1)   RX(2)     n(2)          无数据表示读取、有数据表示写对应的寄存器 
   18          
   19          数据定义:  长度 + 数据
   20                     n*2    dat(n*2)
   21          
   22          2. 应答帧 -- 返回数据
   23          地址           命令   数据长度    数据      CRC   
   24          0A(固定值)     Cmd    n(1)        dat(n)
   25          
   26          3. 应答帧 -- 返回状态
   27          地址           命令   寄存器   寄存器数量     CRC   
   28          0A(固定值)     Cmd    Rx(2)    n(2)                       
   29          */
   30          
   31          
   32          DEVICE_READ_ACK xdata  DevReadAck;   
   33          DEVICE_WRITE_ACK xdata DevWriteAck;
   34          
   35          HOST_SEND_FRAME xdata RecvFrame;   
   36          
   37          
   38          // 把浮点数转换为大端打包到发送数据区
   39          void PackageFloatValue(WORD Offset, float val)
   40          {
   41   1          BYTE temp[4] = {0};
   42   1          FloatToBytes(val,temp);
   43   1          memcpy(&DevReadAck.Data[Offset], temp, 4);  
   44   1      }
   45          
   46          void PackageDWordValue(WORD Offset, DWORD val)
   47          {
   48   1          DWORD temp;
   49   1          temp = SwEndian(val);
   50   1          memcpy(&DevReadAck.Data[Offset], &temp, 4);  
   51   1      }
   52          
   53          
   54          void PackageWordValue(WORD Offset, WORD val)
   55          {
   56   1          BYTE temp[2] = {0};
   57   1          temp[0] = (BYTE)(val >> 8);
C251 COMPILER V5.60.0,  ModBusDev                                                          21/05/24  09:30:57  PAGE 2   

   58   1          temp[1] = (BYTE)val;
   59   1          memcpy(&DevReadAck.Data[Offset], temp, 2);  
   60   1      }
   61          
   62          // 把寄存器值包装到发送缓存
   63          bool PackageReg(WORD Reg, WORD Count)
   64          {
   65   1          DWORD offset;
   66   1          BYTE *p;
   67   1          SyncModBusDev();
   68   1          if (Count > 128)
   69   1          {
   70   2              return false;
   71   2          }
   72   1      
   73   1          if (Reg >= MODBUS_DEV_ADD)
   74   1          {
   75   2              offset = (Reg - MODBUS_DEV_ADD)*2;
   76   2              if (offset >= sizeof(MODBUS_ADDR))
   77   2              {
   78   3                  return false;
   79   3              }
   80   2              p = (BYTE *)&ModBusAddr;
   81   2              memcpy(DevReadAck.Data, &p[offset], Count*2);  
   82   2          }
   83   1      
   84   1           else if (Reg >= MODBUS_FACTOR_ADD)
   85   1          {
   86   2              offset = (Reg - MODBUS_FACTOR_ADD)*2;
   87   2              if (offset >= sizeof(MODBUS_FACTOR))
   88   2              {
   89   3                  return false;
   90   3              }
   91   2              
   92   2              p = (BYTE *)&ModBusFactor;
   93   2              memcpy(DevReadAck.Data, &p[offset], Count*2); 
   94   2          }
   95   1      
   96   1          else if (Reg >= MODBUS_THR_ADD)
   97   1          {
   98   2              offset = (Reg - MODBUS_THR_ADD)*2;
   99   2              if (offset >= sizeof(MODBUS_THR))
  100   2              {
  101   3                  return false;
  102   3              }
  103   2              
  104   2              p = (BYTE *)&ModBusThr;
  105   2              memcpy(DevReadAck.Data, &p[offset], Count*2); 
  106   2          }
  107   1      
  108   1          else if (Reg >= MODBUS_ALARM_ADD)
  109   1          {
  110   2              offset = (Reg - MODBUS_ALARM_ADD)*2;
  111   2              if (offset >= sizeof(MODBUS_ALARM))
  112   2              {
  113   3                  return false;
  114   3              }
  115   2              
  116   2              p = (BYTE *)&ModBusAlarm;
  117   2              memcpy(DevReadAck.Data, &p[offset], Count*2);  
  118   2          }
  119   1          else if (Reg >= MODBUS_DOSERATE_ADD)
  120   1          {
  121   2              offset = (Reg - MODBUS_DOSERATE_ADD)*2;
  122   2              if (offset >= sizeof(MODBUS_DOSERATE))
  123   2              {
C251 COMPILER V5.60.0,  ModBusDev                                                          21/05/24  09:30:57  PAGE 3   

  124   3                  return false;
  125   3              }
  126   2              p = (BYTE *)&ModBusDoserate;
  127   2              memcpy(DevReadAck.Data, &p[offset], Count*2);  
  128   2          }
  129   1          
  130   1          else
  131   1          {
  132   2              return false;
  133   2          }
  134   1      
  135   1          return true;
  136   1      }
  137          
  138          BYTE ReadAck( )
  139          {
  140   1          WORD i = 0;
  141   1          WORD crc,SendLen;
  142   1          memset(&DevReadAck, 0, sizeof(DEVICE_READ_ACK));
  143   1          
  144   1          DevReadAck.Address = RecvFrame.Address; 
  145   1          DevReadAck.FunctionCode = RecvFrame.FunctionCode;
  146   1          SendLen = 2;
  147   1          DevReadAck.DataLen = RecvFrame.RegCount*2; 
  148   1          SendLen ++;
  149   1          PackageReg(RecvFrame.RegAddr, RecvFrame.RegCount);
  150   1          SendLen += DevReadAck.DataLen;
  151   1          
  152   1          // 计算CRC , 并添加到数据后面
  153   1          i = DevReadAck.DataLen;
  154   1          crc = CRC16Calc((BYTE *)&DevReadAck, SendLen);
  155   1          DevReadAck.Data[i]  = (BYTE)(crc);
  156   1          DevReadAck.Data[i+1] = (BYTE)(crc>>8);
  157   1          SendLen += 2; 
  158   1          Uart1Send((BYTE *)&DevReadAck, (BYTE)SendLen);
  159   1          return true;
  160   1      }
  161          
  162          
  163          // 发送写命令应答
  164          void WriteAck()
  165          {
  166   1          WORD crc;
  167   1          memset(&DevWriteAck, 0, sizeof(DEVICE_WRITE_ACK));
  168   1          
  169   1          DevWriteAck.Address = RecvFrame.Address;  
  170   1          DevWriteAck.FunctionCode = RecvFrame.FunctionCode;
  171   1          DevWriteAck.RegAddr = RegSw(RecvFrame.RegAddr);
  172   1          DevWriteAck.RegCount = RegSw(RecvFrame.RegCount);
  173   1      
  174   1          crc = CRC16Calc((BYTE *)&DevWriteAck, 6);
  175   1          DevWriteAck.Crc = crc;
  176   1      
  177   1          Uart1Send((BYTE *)&DevWriteAck, sizeof(DEVICE_WRITE_ACK));
  178   1      
  179   1      }
  180          
  181          
  182          void ModBusSaveParam()
  183          {
  184   1          BYTE i = 0,j = 0;
  185   1          SysParam.Addr = ModBusAddr.Addr;
  186   1          
  187   1      //    SysParam.s_DoseRate.DoseRate = ModBusDoserate.DoseRate;
  188   1      //    SysParam.s_DoseRate.DoseTotal = ModBusDoserate.DoseTotal;
  189   1      //    SysParam.s_DoseRate.DevSt = ModBusDoserate.DevSt;
C251 COMPILER V5.60.0,  ModBusDev                                                          21/05/24  09:30:57  PAGE 4   

  190   1      //    SysParam.s_DoseRate.Cps1 = ModBusDoserate.Cps1;
  191   1      //    SysParam.s_DoseRate.Cps2 = ModBusDoserate.Cps2;
  192   1      //    SysParam.s_DoseRate.Cps3 = ModBusDoserate.Cps3;
  193   1      
  194   1          SysParam.s_Alarm.DoseRatePreAlarm = ModBusAlarm.DoseRatePreAlarm;
  195   1          SysParam.s_Alarm.DoseRateAlarm= ModBusAlarm.DoseRateAlarm;
  196   1          SysParam.s_Alarm.DosePreAlarm = ModBusAlarm.DosePreAlarm;
  197   1          SysParam.s_Alarm.DoseAlarm = ModBusAlarm.DoseAlarm;
  198   1          for(i = 0;i < 3;i++)
  199   1          {
  200   2              SysParam.s_Thr.DET_THR[3] = ModBusThr.DET_THR[3];
  201   2          }
  202   1          SysParam.s_Thr.AnalogChannel = ModBusThr.AnalogChannel ;
  203   1          
  204   1          for(i = 0;i < 16;i++)
  205   1          {
  206   2              SysParam.fix[i] = ModBusFactor.Fix[i];
  207   2          }
  208   1      
  209   1          
  210   1          WriteParam();
  211   1      }
  212          
  213          // 把接收到的数据加载到寄存器中
  214          bool WriteRegValue(WORD Reg, WORD Count)
  215          {
  216   1          BYTE *p;
  217   1          int len,offset;
  218   1          if ((Reg ==MODBUS_DEV_ADD)&& (Count == 1))
  219   1          {
  220   2              SysParam.Addr = RecvFrame.Data[2];
  221   2              WriteParam();
  222   2              return true;
  223   2          }
  224   1          else if(Reg >= MODBUS_FACTOR_ADD) 
  225   1          {
  226   2              len = sizeof(MODBUS_FACTOR);
  227   2              offset = (Reg - MODBUS_FACTOR_ADD) * 2;
  228   2              if ( (offset + Count * 2) > len )
  229   2              {
  230   3                  return false;
  231   3              }
  232   2              p = (BYTE *)&ModBusFactor;        
  233   2              memcpy(&p[offset], &RecvFrame.Data[1], Count*2); //RecvFrame.Data[1]
  234   2              ModBusSaveParam();
  235   2              return true;
  236   2          }
  237   1          else if(Reg >= MODBUS_THR_ADD) 
  238   1          {
  239   2              len = sizeof(MODBUS_THR);
  240   2              offset = (Reg - MODBUS_THR_ADD) * 2;
  241   2              if ( (offset + Count * 2) > len )
  242   2              {
  243   3                  return false;
  244   3              }
  245   2              p = (BYTE *)&ModBusThr;
  246   2              memcpy(&p[offset], &RecvFrame.Data[1], Count*2);
  247   2              ModBusSaveParam();
  248   2              return true;
  249   2          }
  250   1          else  if (Reg >= MODBUS_ALARM_ADD) 
  251   1          {
  252   2              len = sizeof(MODBUS_ALARM);
  253   2              offset = (Reg - MODBUS_ALARM_ADD) * 2;
  254   2              if ( (offset + Count * 2) > len )
  255   2              {
C251 COMPILER V5.60.0,  ModBusDev                                                          21/05/24  09:30:57  PAGE 5   

  256   3                  return false;
  257   3              }
  258   2              p = (BYTE *)&ModBusAlarm;
  259   2              memcpy(&p[offset], &RecvFrame.Data[1], Count*2);
  260   2              ModBusSaveParam();
  261   2              return true;
  262   2          }
  263   1          return false;
  264   1      }
  265          
  266          
  267          // 设寄存器值
  268          void SetRegValue()
  269          {
  270   1          if (RecvFrame.Data[0] == 0)
  271   1          {
  272   2              return;
  273   2          }
  274   1      
  275   1          if (WriteRegValue(RecvFrame.RegAddr, RecvFrame.RegCount))
  276   1          {
  277   2              WriteAck();
  278   2          }
  279   1      }
  280          
  281          
  282          void HndModBusRecv(BYTE *buf, BYTE len)
  283          {
  284   1          if (!ValidRtuFrame(buf, len))
  285   1          {
  286   2      
  287   2              return;
  288   2          }
  289   1      
  290   1          memset(&RecvFrame, 0, sizeof(HOST_SEND_FRAME));
  291   1          memcpy(&RecvFrame, buf, len);
  292   1          if (RecvFrame.Address != SysParam.Addr)
  293   1          {
  294   2              return;
  295   2          }
  296   1      
  297   1          switch(RecvFrame.FunctionCode)
  298   1          {
  299   2              case CMD_READ_REG: ReadAck();  break;
  300   2              case CMD_WRITE_REG: SetRegValue();  break;
  301   2          }
  302   1      }
  303          
  304          
  305          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      1257     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =       649     ------
  xdata-const size     =    ------     ------
  edata size           =    ------         26
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
C251 COMPILER V5.60.0,  ModBusDev                                                          21/05/24  09:30:57  PAGE 6   

  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =         6     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
